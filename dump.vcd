$date
	Thu May 28 21:47:05 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ! \data[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 " \data[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 # \data[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 $ \data[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 % \data[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 & \data[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ' \data[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ( \data[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 ) \data[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 * \data[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 + \data[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 , \data[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 - \data[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 . \data[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 / \data[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 0 \data[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 1 \data[16] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 2 \data[17] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 3 \data[18] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module data_memory $end
$var reg 8 4 \data[19] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 5 \data[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 6 \data[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 7 \data[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 8 \data[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 9 \data[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 : \data[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 ; \data[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 < \data[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 = \data[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 > \data[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 ? \data[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$scope module cpu $end
$scope module data_path $end
$scope module stack $end
$var reg 8 @ \data[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPUTest $end
$var reg 1 A clk $end
$scope module cpu $end
$var wire 2 B alu_op [1:0] $end
$var wire 1 C clk $end
$var wire 8 D inst [7:0] $end
$var wire 1 E ld_B $end
$var wire 1 F ld_IR $end
$var wire 1 G ld_MDR $end
$var wire 1 H ld_pc $end
$var wire 1 I mem_adr_src $end
$var wire 1 J mem_write_sig $end
$var wire 1 K pc_src $end
$var wire 1 L pop_sig $end
$var wire 1 M push_sig $end
$var wire 1 N stack_src $end
$var wire 1 O tos_sig $end
$var wire 1 P z $end
$scope module data_path $end
$var wire 2 Q alu_op [1:0] $end
$var wire 8 R alu_out [7:0] $end
$var wire 1 C clk $end
$var wire 8 S data_memory_out [7:0] $end
$var wire 1 E ld_B $end
$var wire 1 F ld_IR $end
$var wire 1 G ld_MDR $end
$var wire 1 H ld_pc $end
$var wire 1 I mem_adr_src $end
$var wire 1 J mem_write_sig $end
$var wire 1 K pc_src $end
$var wire 1 L pop_sig $end
$var wire 1 M push_sig $end
$var wire 8 T stack_out [7:0] $end
$var wire 1 N stack_src $end
$var wire 1 O tos_sig $end
$var reg 8 U B_reg [7:0] $end
$var reg 8 V alu_out_reg [7:0] $end
$var reg 8 W instruction [7:0] $end
$var reg 8 X mdr [7:0] $end
$var reg 5 Y pc [4:0] $end
$var reg 1 Z z $end
$scope module data_memory $end
$var wire 5 [ address [4:0] $end
$var wire 1 C clk $end
$var wire 1 J mem_write_sig $end
$var wire 8 \ write_data [7:0] $end
$var integer 32 ] i [31:0] $end
$var reg 8 ^ read_data [7:0] $end
$scope begin loop $end
$upscope $end
$upscope $end
$scope module stack $end
$var wire 1 C clk $end
$var wire 1 L pop_sig $end
$var wire 8 _ push_data [7:0] $end
$var wire 1 M push_sig $end
$var wire 1 O tos_sig $end
$var integer 32 ` i [31:0] $end
$var reg 8 a out_data [7:0] $end
$var reg 3 b stack_pointer [2:0] $end
$scope begin loop2 $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 8 c A [7:0] $end
$var wire 8 d B [7:0] $end
$var wire 2 e alu_op [1:0] $end
$var reg 8 f R [7:0] $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 C clk $end
$var wire 8 g inst [7:0] $end
$var wire 1 P zero $end
$var reg 2 h alu_op [1:0] $end
$var reg 1 i ld_B $end
$var reg 1 j ld_IR $end
$var reg 1 k ld_MDR $end
$var reg 1 l ld_pc $end
$var reg 1 m mem_adr_src $end
$var reg 1 n mem_write $end
$var reg 4 o ns [3:0] $end
$var reg 1 p pc_src $end
$var reg 4 q ps [3:0] $end
$var reg 1 r stack_pop $end
$var reg 1 s stack_push $end
$var reg 1 t stack_src $end
$var reg 1 u tos $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0u
0t
0s
0r
b1111 q
0p
b0 o
0n
0m
0l
0k
0j
0i
b0 h
bx g
bx f
b0 e
bx d
bx c
b0 b
bx a
b1100 `
bx _
bx ^
b10100 ]
bx \
bx [
xZ
b0 Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
b0 Q
xP
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
bx D
0C
b0 B
0A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
b10 1
b1 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
b11111111 (
b100000 '
b11001000 &
b0 %
b11100110 $
b10010001 #
b10010000 "
b10001111 !
$end
#20
b10001111 ^
b10001111 S
b0 [
1l
1H
1j
1F
1m
1I
b1 o
b0 q
1A
1C
#40
0A
0C
#60
1k
1G
b101 o
0j
0F
0m
0I
0l
0H
b1 ^
b1 S
b1111 [
b1 q
b10001111 W
b10001111 D
b10001111 g
b1 Y
1A
1C
#80
0A
0C
#100
1s
1M
b110 o
0k
0G
b1 _
b1 X
b101 q
1A
1C
#120
0A
0C
#140
b0 o
0s
0M
b110 q
0Z
0P
b1 a
b1 T
b1 \
b1 d
b1 b
b1 5
1A
1C
#160
0A
0C
#180
b10010000 ^
b10010000 S
b1 [
1l
1H
1j
1F
1m
1I
b1 o
b0 q
1A
1C
#200
0A
0C
#220
1k
1G
b101 o
0j
0F
0m
0I
0l
0H
b10 ^
b10 S
b10000 [
b1 q
b10010000 W
b10010000 D
b10010000 g
b10 Y
1A
1C
#240
0A
0C
#260
1s
1M
b110 o
0k
0G
b10 _
b10 X
b101 q
1A
1C
#280
0A
0C
#300
b0 o
0s
0M
b110 q
b10 a
b10 T
b10 \
b10 d
b10 b
b10 6
1A
1C
#320
0A
0C
#340
b10010001 ^
b10010001 S
b10 [
1l
1H
1j
1F
1m
1I
b1 o
b0 q
1A
1C
#360
0A
0C
#380
1k
1G
b101 o
0j
0F
0m
0I
0l
0H
b0 ^
b0 S
b10001 [
b1 q
b10010001 W
b10010001 D
b10010001 g
b11 Y
1A
1C
#400
0A
0C
#420
1s
1M
b110 o
0k
0G
b0 _
b0 X
b101 q
1A
1C
#440
0A
0C
#460
b0 o
0s
0M
b110 q
1Z
1P
b0 a
b0 T
b0 \
b0 d
b11 b
b0 7
1A
1C
#480
0A
0C
#500
b11100110 ^
b11100110 S
b11 [
1l
1H
1j
1F
1m
1I
b1 o
b0 q
1A
1C
#520
0A
0C
#540
b1010 o
0j
0F
0m
0I
0l
0H
b100000 ^
b100000 S
b110 [
b1 q
b11100110 W
b11100110 D
b11100110 g
b100 Y
1A
1C
#560
0A
0C
#580
1p
1K
1l
1H
1u
1O
b0 o
b1010 q
1A
1C
#600
0A
0C
#620
1j
1F
1m
1I
b1 o
0u
0O
1l
1H
0p
0K
b0 q
b110 Y
1A
1C
#640
0A
0C
#660
1i
1E
1r
1L
b10 o
0j
0F
0m
0I
0l
0H
b10001111 ^
b10001111 S
b0 [
b100000 W
b100000 D
b100000 g
b111 Y
b1 q
1A
1C
#680
0A
0C
#700
1u
1O
b11 o
0i
0E
1r
1L
b0 f
b0 R
b10 q
b0 U
b0 c
b10 b
1A
1C
#720
0A
0C
#740
b11111110 _
1t
1N
1s
1M
b1 h
b1 B
b1 Q
b1 e
b0 o
0r
0L
1u
1O
b0 V
b11 q
b11111110 f
b11111110 R
b1 b
b10 a
b10 T
b10 \
b10 d
1A
1C
#760
0A
0C
#780
b11111111 ^
b11111111 S
b111 [
1l
1H
1j
1F
1m
1I
b1 o
b0 h
b0 B
b0 Q
b0 e
0s
0M
0u
0O
0t
0N
b0 q
b11111110 V
0Z
0P
b0 _
b11111110 f
b11111110 R
b11111110 a
b11111110 T
b11111110 \
b11111110 d
b10 b
b11111110 6
1A
1C
#800
0A
0C
#820
b1010 o
0j
0F
0m
0I
0l
0H
bx ^
bx S
b11111 [
b11111111 W
b11111111 D
b11111111 g
b1000 Y
b1 q
1A
1C
#840
0A
0C
#860
1A
1C
